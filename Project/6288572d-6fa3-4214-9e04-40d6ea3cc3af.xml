<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF pStep = 0 AND Execute THEN&#xD;
	tmpNodeNo := NodeNo;&#xD;
	pStep := 10;&#xD;
END_IF;&#xD;
&#xD;
CASE pStep OF&#xD;
    0 : // Initializing&#xD;
			Done := FALSE;&#xD;
			Busy := FALSE;&#xD;
			execCheckSetupStatus:=FALSE;&#xD;
			execSetup := FALSE;&#xD;
			execRestartDrive := FALSE;&#xD;
&#xD;
	10:	// Execute Motor ID Setup&#xD;
			Busy := TRUE;&#xD;
			SDOObject.Index := 16#4410; // Index to write&#xD;
			SDOObject.Subindex := 16#F1; // subindex to write&#xD;
			SDOObject.IsCompleteAccess := FALSE; &#xD;
			SetMotorID := 16#7465736d; // '= 'tesm'&#xD;
			WriteSize := 4; // Write size in Bytes&#xD;
			execSetup := TRUE;&#xD;
			&#xD;
			IF WriteMotorSetupID.Done THEN&#xD;
				execSetup :=FALSE;&#xD;
				pStep := 20;&#xD;
			ELSIF WriteMotorSetupID.Error THEN&#xD;
				ErrorID := WriteMotorSetupID.ErrorID;&#xD;
				pStep := 990;&#xD;
			END_IF;&#xD;
			&#xD;
		20: // Check if Setup is completed&#xD;
			SDOObject.Index := 16#4410; // Index to write&#xD;
			SDOObject.Subindex := 16#FF; // subindex to write&#xD;
			SDOObject.IsCompleteAccess := FALSE;&#xD;
									&#xD;
			IF ReadSetupStatus.Done = FALSE THEN&#xD;
				execCheckSetupStatus := TRUE;&#xD;
			ELSIF ReadSetupStatus.Done = TRUE THEN&#xD;
				execCheckSetupStatus := FALSE;&#xD;
				IF ReadData = 0 THEN // Setup not executed or completed&#xD;
					pStep := 40;&#xD;
				ELSIF ReadData = 1 THEN // Setup in execution&#xD;
					pStep := 30; // Reexecute &#xD;
				END_IF;&#xD;
			ELSIF ReadSetupStatus.Error THEN&#xD;
				ErrorID := ReadSetupStatus.ErrorID;&#xD;
				pStep := 991;&#xD;
			END_IF;&#xD;
				&#xD;
		30: // Rexecute Check Setup&#xD;
			pStep := 20;&#xD;
		&#xD;
		40: // Restart the drive&#xD;
			SDOObject.Index := 16#2400; // Index to write&#xD;
			SDOObject.Subindex := 16#01; // subindex to write&#xD;
			SDOObject.IsCompleteAccess := FALSE;&#xD;
			ClearString(InOut:=ResetDrive);&#xD;
			ResetDrive := 'tesera'; // Code to set for executing the Motor ID setup in the drive  16# 74 65 73 65 72 61&#xD;
			WriteSize := 6; // Write size in Bytes&#xD;
			execRestartDrive := TRUE;&#xD;
			&#xD;
			IF WriteDriveResetCmd.Done THEN&#xD;
				execRestartDrive :=FALSE;	&#xD;
				FB_TONwait1Sreset(In:=FALSE);&#xD;
				//Done := TRUE;&#xD;
				pStep := 43;&#xD;
			ELSIF WriteDriveResetCmd.Error THEN&#xD;
				ErrorID := WriteDriveResetCmd.ErrorID;&#xD;
				pStep := 992;&#xD;
			END_IF;&#xD;
		43:  //wait until 1s is reboot&#xD;
			FB_TONwait1Sreset(In:=TRUE,PT:=T#6s);&#xD;
			IF FB_TONwait1Sreset.Q THEN&#xD;
				FB_TONwait1Sreset.In := FALSE;&#xD;
				FB_ResetECError.Execute:=FALSE;&#xD;
				pStep := 45;&#xD;
			END_IF;&#xD;
		45: // Reset EC Error&#xD;
			FB_ResetECError.Execute := TRUE;&#xD;
			IF FB_ResetECError.Done THEN&#xD;
				FB_ResetECError.Execute:=FALSE;&#xD;
				Done :=TRUE;&#xD;
				pStep := 50;&#xD;
			ELSIF FB_ResetECError.Error THEN&#xD;
				FB_ResetECError.Execute:=FALSE;&#xD;
				ErrorID := FB_ResetECError.ErrorID;&#xD;
				pStep := 993;&#xD;
			END_IF;&#xD;
		&#xD;
		50: // Reset the Done&#xD;
			Done := FALSE;&#xD;
			pStep := 0;&#xD;
				&#xD;
	990..999: // Error Handling&#xD;
		Error := TRUE;&#xD;
		Busy := FALSE;&#xD;
		Done := FALSE;&#xD;
		&#xD;
		IF Reset THEN&#xD;
			Error :=FALSE;&#xD;
			ErrorID:=16#0000;&#xD;
			execCheckSetupStatus :=FALSE;&#xD;
			execRestartDrive:=FALSE;&#xD;
			execSetup:=FALSE;&#xD;
			pStep := 0;		&#xD;
		END_IF;&#xD;
&#xD;
END_CASE;&#xD;
&#xD;
&#xD;
WriteMotorSetupID(Execute:=execSetup, NodeAdr:=tmpNodeNo, SdoObj:=SDOObject, TimeOut:=Timeout, WriteDat:=SetMotorID, WriteSize:=WriteSize);&#xD;
ReadSetupStatus(Execute:=execCheckSetupStatus, NodeAdr:=tmpNodeNo, SdoObj:=SDOObject, TimeOut:=Timeout, ReadDat:=ReadData, ReadSize=&gt;ReadSize);&#xD;
WriteDriveResetCmd(Execute:=execRestartDrive, NodeAdr:=tmpNodeNo, SdoObj:=SDOObject, TimeOut:=Timeout, WriteDat:=ResetDrive, WriteSize:=WriteSize);&#xD;
FB_ResetECError();</Text></StructuredTextModel>