<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//FB name: HomeTorquePP&#xD;
&#xD;
//Revision: 1.00&#xD;
//Library: &#xD;
//Namespace: OMR_CH_PP_Pos&#xD;
//Autor: UN 26.7.16&#xD;
&#xD;
// Function: Home procedure using PP_Position FB. Homing is done with end stop. With or without return to Z-reference.&#xD;
// Input/Output:&#xD;
//		AxisPar  -&gt; Axis structure of PP_Positioning&#xD;
// Input: &#xD;
//		Execute [BOOL]&#xD;
//		Velocity [DINT]  speed to drive to end stop. If positive search in positive direction, negative value search in negative direction&#xD;
//     Torque [UINT] reduced torque to search end stop.&#xD;
//		HomeOffset [DINT]  Offset applied after successful homing&#xD;
// Output:&#xD;
//		Done [BOOL]  finished successful activ only for one cycle&#xD;
//		ErrorID [UINT] failure numbers of PP_Positioning are used.   16#FFFF -&gt; Axis was not switch on&#xD;
//		Error [BOOL]  error appeared&#xD;
&#xD;
&#xD;
&#xD;
CASE Status OF&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	//  Initialisation&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	Init:&#xD;
		Done:=FALSE;&#xD;
		IF Execute THEN&#xD;
			Error := FALSE;&#xD;
			ErrorID := 16#0;&#xD;
			Busy:=TRUE;&#xD;
			FB_MC_MoveVel1S.Execute := FALSE;&#xD;
			FB_MC_Stop1S.Execute := FALSE;&#xD;
			FB_MC_Home1S.Execute := FALSE;&#xD;
			FB_MC_MoveRel1S.Execute := FALSE;&#xD;
			oldTorqueNeg:= Axis.Negative_torque_limit;&#xD;
			oldTorquePos:= Axis.Positive_torque_limit;&#xD;
			Axis.Negative_torque_limit := Torque;&#xD;
			Axis.Positive_torque_limit := Torque;&#xD;
			Status := DriveTorque;&#xD;
		END_IF;	&#xD;
		&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// Drive to end stop&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	DriveTorque:&#xD;
		IF Axis.Status.Ready THEN&#xD;
			FB_MC_MoveVel1S.Velocity := Velocity;&#xD;
			FB_MC_MoveVel1S.Acceleration := Velocity * 10;&#xD;
			FB_MC_MoveVel1S.Deceleration := Velocity * 10;&#xD;
			FB_MC_MoveVel1S.Direction := Direction;&#xD;
			FB_MC_MoveVel1S.Execute := TRUE;&#xD;
							&#xD;
			Status:=WaitSpeed;&#xD;
		END_IF;&#xD;
		&#xD;
	&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// Wait until motor started&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 	&#xD;
	WaitSpeed:&#xD;
		IF FB_MC_MoveVel1S.Active THEN&#xD;
			FB_MC_MoveVel1S.Execute := FALSE;&#xD;
			Status := StopTorqueMode;&#xD;
		ELSIF FB_MC_MoveVel1S.Error THEN&#xD;
			ErrorID := FB_MC_MoveVel1S.ErrorID;&#xD;
			Status := Errorstate;&#xD;
		END_IF;&#xD;
		&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// Wait until end posistion In Torque reached&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 		&#xD;
	StopTorqueMode:&#xD;
		FB_delay_InTorque.In :=  (ABS(Axis.Act.Trq)) &gt;= Torque;   //Set torque is achieved&#xD;
		IF FB_delay_InTorque.Q THEN		//Set torque must be active for some milliseconds  WAIT_IN_TORQUE constant&#xD;
			FB_MC_Stop1S.Execute := TRUE;&#xD;
			FB_MC_Stop1S.Deceleration := 10*Velocity;&#xD;
			Status:=wStop;&#xD;
		ELSIF Axis.DrvStatus.DrvAlarm OR not Axis.DrvStatus.MainPower OR NOT Axis.DrvStatus.ServoOn THEN&#xD;
			ErrorID := ERR_SERVO_OFF;			//16#5441 operation with servo off&#xD;
			Error := TRUE;&#xD;
			Status := Errorstate;&#xD;
		END_IF;&#xD;
&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// stop torque mode&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	wStop:&#xD;
	    FB_MC_Stop1S.Execute := FALSE;&#xD;
		FB_delay_InTorque.In := FALSE;&#xD;
		IF FB_MC_Stop1S.Done THEN&#xD;
			Status := Move_Away;&#xD;
			Axis.Negative_torque_limit:=oldTorqueNeg;		//Set torque to the one set before start homin&#xD;
			Axis.Positive_torque_limit:=oldTorquePos;&#xD;
		ELSIF FB_MC_Stop1S.Error OR Axis.DrvStatus.DrvAlarm OR not Axis.DrvStatus.MainPower OR NOT Axis.DrvStatus.ServoOn THEN&#xD;
			Status := Errorstate;&#xD;
		END_IF;&#xD;
		&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// move away from end position  (prevent overload)&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	  Move_Away:&#xD;
	  	IF Direction = eMC_DIRECTION#mcPositiveDirection THEN&#xD;
			FB_MC_MoveRel1S.Distance := Distance;   &#xD;
		ELSE&#xD;
			FB_MC_MoveRel1S.Distance := -Distance;&#xD;
		END_IF;&#xD;
		FB_MC_MoveRel1S.Velocity := Velocity;&#xD;
		FB_MC_MoveRel1S.Acceleration := Velocity*10;&#xD;
	  	FB_MC_MoveRel1S.Execute := TRUE;&#xD;
		Status:=wMove_Away;&#xD;
		&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// wait away from end pos&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	wMove_Away:&#xD;
		IF FB_MC_MoveRel1S.Done THEN&#xD;
			FB_MC_MoveRel1S.Execute:=FALSE;&#xD;
&#xD;
			FB_MC_Home1S.HomeOffset:=HomeOffset;&#xD;
			FB_MC_Home1S.Execute := TRUE;	&#xD;
			Status:=Home_Ax;&#xD;
		ELSIF FB_MC_MoveRel1S.Error THEN&#xD;
			FB_MC_MoveRel1S.Execute := FALSE;&#xD;
			ErrorID:=FB_MC_MoveRel1S.ErrorID;&#xD;
			Status:=Errorstate;&#xD;
		END_IF;  &#xD;
	  &#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// Homing axis according homing method of drive  paramater 6098 [33,34,35]&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	Home_Ax:&#xD;
		IF FB_MC_Home1S.Done THEN&#xD;
			FB_MC_Home1S.Execute:=FALSE;&#xD;
			Status  :=Init;&#xD;
			Done:= TRUE;&#xD;
			Busy := FALSE;&#xD;
		ELSIF FB_MC_Home1S.Error  THEN&#xD;
			FB_MC_Home1S.Execute:=FALSE;&#xD;
			Status:=Errorstate;&#xD;
		END_IF;&#xD;
		&#xD;
	&#xD;
&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	// Errorstate&#xD;
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &#xD;
	Errorstate:&#xD;
		FB_MC_Home1S.Execute := FALSE;&#xD;
		FB_MC_MoveVel1S.Execute := FALSE;&#xD;
		FB_MC_Stop1S.Execute := FALSE;&#xD;
		Busy := FALSE;		&#xD;
		&#xD;
		IF Axis.DrvStatus.ServoOn THEN&#xD;
			IF FB_MC_Home1S.Error THEN&#xD;
				ErrorID := FB_MC_Home1S.ErrorID;&#xD;
			ELSIF FB_MC_Stop1S.Error THEN&#xD;
				ErrorID := FB_MC_Stop1S.ErrorID;&#xD;
			ELSIF FB_MC_MoveVel1S.Error THEN&#xD;
				ErrorID := FB_MC_MoveVel1S.ErrorID;&#xD;
			END_IF;&#xD;
		ELSE&#xD;
			ErrorID := 16#FFFF;    //Axis is switch off !&#xD;
		END_IF;&#xD;
		Error := TRUE;&#xD;
&#xD;
		Status := Init;&#xD;
END_CASE;&#xD;
&#xD;
&#xD;
FB_delay_InTorque(PT:=WAIT_IN_TORQUE);&#xD;
FB_MC_MoveVel1S(Axis:=Axis);&#xD;
FB_MC_Stop1S(Axis:=Axis);&#xD;
FB_MC_MoveRel1S(Axis:=Axis);&#xD;
FB_MC_Home1S(Axis:=Axis);&#xD;
</Text></StructuredTextModel>