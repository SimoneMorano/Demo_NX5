<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>//FB name: MC_Restart1S&#xD;
&#xD;
//Revision: 1.04&#xD;
//Library: &#xD;
//Namespace: OMR_CH_PP_Pos&#xD;
//Autor: UN 13.03.17&#xD;
&#xD;
// Function: Restart of 1S Drive&#xD;
// Input/Output:&#xD;
//		AxisPar  -&gt; Axis structure of PP_Positioning&#xD;
// Input: &#xD;
//		Execute [BOOL]&#xD;
//		NodeNo [UINT]  Node number of 1s Drive&#xD;
&#xD;
// Output:&#xD;
//		Done [BOOL]  finished successful activ only for one cycle&#xD;
//		ErrorID [UINT] failure numbers of PP_Positioning are used.   16#FFFF -&gt; Axis was not switch on&#xD;
//		Error [BOOL]  error appeared&#xD;
&#xD;
IF pStep = 0 AND Execute THEN&#xD;
	pStep := 40;&#xD;
	Busy := TRUE;&#xD;
END_IF;&#xD;
&#xD;
CASE pStep OF&#xD;
    	0 : // Initializing&#xD;
			Done := FALSE;&#xD;
			Busy := FALSE;&#xD;
			execRestartDrive := FALSE;&#xD;
&#xD;
		40: // Restart the drive&#xD;
			SDOObject.Index := 16#2400; // Index to write&#xD;
			SDOObject.Subindex := 16#01; // subindex to write&#xD;
			SDOObject.IsCompleteAccess := FALSE;&#xD;
			//ResetDrive := 'tesera'; // Code to set for executing the Motor ID setup in the drive  16# 74 65 73 65 72 61&#xD;
			WriteSize := 6; // Write size in Bytes&#xD;
			execRestartDrive := TRUE;&#xD;
			&#xD;
			IF WriteDriveResetCmd.Done THEN&#xD;
				execRestartDrive :=FALSE;	&#xD;
				FB_TONwait1Sreset(In:=FALSE);&#xD;
				pStep := 43;&#xD;
			ELSIF WriteDriveResetCmd.Error THEN&#xD;
				ErrorID := WriteDriveResetCmd.ErrorID;&#xD;
				pStep := 992;&#xD;
			END_IF;&#xD;
		43:  //wait until 1s is reboot&#xD;
			FB_TONwait1Sreset(In:=TRUE,PT:=T#6s);&#xD;
			IF FB_TONwait1Sreset.Q THEN&#xD;
				FB_TONwait1Sreset.In := FALSE;&#xD;
				FB_ResetECError.Execute:=FALSE;&#xD;
				pStep := 45;&#xD;
			END_IF;&#xD;
		45: // Reset EC Error&#xD;
			FB_ResetECError.Execute := TRUE;&#xD;
			IF FB_ResetECError.Done THEN&#xD;
				FB_ResetECError.Execute:=FALSE;&#xD;
				Done :=TRUE;&#xD;
				pStep := 50;&#xD;
			ELSIF FB_ResetECError.Error THEN&#xD;
				FB_ResetECError.Execute:=FALSE;&#xD;
				ErrorID := FB_ResetECError.ErrorID;&#xD;
				pStep := 993;&#xD;
			END_IF;&#xD;
		&#xD;
		50: // Reset the Done&#xD;
			Done := FALSE;&#xD;
			Busy := FALSE;&#xD;
			pStep := 0;&#xD;
				&#xD;
	990..999: // Error Handling&#xD;
		Error := TRUE;&#xD;
		Busy := FALSE;&#xD;
		Done := FALSE;&#xD;
		&#xD;
		IF NOT Execute THEN&#xD;
			Error :=FALSE;&#xD;
			ErrorID:=16#0000;&#xD;
			execRestartDrive:=FALSE;&#xD;
			pStep := 0;		&#xD;
		END_IF;&#xD;
&#xD;
END_CASE;&#xD;
&#xD;
WriteDriveResetCmd(Execute:=execRestartDrive, NodeAdr:=NodeNo, SdoObj:=SDOObject, TimeOut:=20, WriteDat:=ResetDrive, WriteSize:=WriteSize);&#xD;
FB_ResetECError();</Text></StructuredTextModel>