<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>// Read out additional information of 1S servo drive, motor and encoder&#xD;
// FB Name: 	Get1sInfo&#xD;
//&#xD;
// Namespace:  	nsOCH_Axis&#xD;
// Programmer: 	Omron CH  UN&#xD;
// Version:			1.02      (08.07.16  tested with Sysmac Studio 1.16, NJ5 1.12, Drive Version 1.00.RC8.AV)&#xD;
// Input:	&#xD;
//				Execute:			pos. edge on execute start function block&#xD;
//				NodeNo:			Ethercat NodeNo of drive&#xD;
//				DriveInfo: 		Activate reading additional drive information section&#xD;
//				LifetimeInfo: 	Activate reading additional lifetime information&#xD;
//				EncoderInfo: 	Activate reading additional encoder information&#xD;
//				MotorInfo:		Activate reading additional motor information&#xD;
// Output:		&#xD;
//				Info1S:		Structure with above 4 section		&#xD;
//				Done:		Active for one cycle after successful reading parameter&#xD;
//				Error:		Errorflag if reading parameter failed, or input parameter are wrong&#xD;
//				ErrorID:	Failure number   	16#0001 -&gt; Input selection is wrong all input section are false   |ERR_WrongInputSelect&#xD;
//															16#0002 -&gt; Ethercat node number not present or not ready for SDO communication   |ERR_MessageCommmunicationsNotEnabled&#xD;
//															16#01xx  -&gt; Error during SDO_read  xx -&gt; internal state where it happen as BCD code&#xD;
// Change List:&#xD;
// V1.02  added 4510:82 Resolution per Rotation,  4510:84 One-rotation Data,   4510:85: Multi-rotation Data&#xD;
&#xD;
IF _EC_MBXSlavTbl[NodeAdr] THEN&#xD;
		CASE state OF &#xD;
		20:	&#xD;
			Done:=FALSE;&#xD;
			IF Execute THEN&#xD;
				IF not DriveInfo AND NOT LifetimeInfo AND NOT EncoderInfo AND NOT MotorInfo THEN    	// wrong input selection at lest one section must be active&#xD;
					ErrorID := ERR_WrongInputSelect;	&#xD;
					Error := TRUE;&#xD;
					state := 10020;&#xD;
				ELSE&#xD;
					Error:=FALSE;&#xD;
					ErrorID := 16#0;&#xD;
				END_IF;&#xD;
				&#xD;
				IF DriveInfo THEN&#xD;
					state := 21;&#xD;
				ELSIF LifetimeInfo THEN&#xD;
					state := 50;&#xD;
				ELSIF EncoderInfo THEN&#xD;
					state := 80;&#xD;
				ELSIF MotorInfo THEN&#xD;
					state := 100;&#xD;
				END_IF;&#xD;
				FB_SDOread_dint.Execute:=FALSE;&#xD;
				FB_SDOread_udint.Execute:=FALSE;&#xD;
				FB_SDOread_str16.Execute	:= FALSE;&#xD;
				FB_SDOread_str20.Execute := FALSE;&#xD;
			END_IF;&#xD;
		//----------------------------------------------------- Drive Info ------------------------------------------------------------------&#xD;
		21:&#xD;
				SdoObj.Index:=16#4320;&#xD;
				SdoObj.Subindex:=16#81;           //Main Power Supply P-N&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=22;&#xD;
					Info1S.Drive.MainPowerSupplyPN := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10021;&#xD;
				END_IF;&#xD;
		22:&#xD;
				SdoObj.Index:=16#4320;&#xD;
				SdoObj.Subindex:=16#82;		//Drive Temperature&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=23;&#xD;
					Info1S.Drive.ServoDriveTemperature := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10022;&#xD;
				END_IF;&#xD;
		23:&#xD;
				SdoObj.Index:=16#1008;&#xD;
				SdoObj.Subindex:=16#0;		//Manuf device name&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str20.Execute:=TRUE;&#xD;
				IF FB_SDOread_str20.Done THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=24;&#xD;
					Info1S.Drive.ManufacturerDeviceName := read_data_str20;&#xD;
				ELSIF FB_SDOread_str20.Error THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=10023;&#xD;
				END_IF;&#xD;
		24:&#xD;
				SdoObj.Index:=16#1009;&#xD;
				SdoObj.Subindex:=16#0;		//Drive Temperature&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str20.Execute:=TRUE;&#xD;
				IF FB_SDOread_str20.Done THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=25;&#xD;
					Info1S.Drive.ManufacturerHardwareVersion := read_data_str20;&#xD;
				ELSIF FB_SDOread_str20.Error THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=10024;&#xD;
				END_IF;&#xD;
		25:&#xD;
				SdoObj.Index:=16#100A;&#xD;
				SdoObj.Subindex:=16#0;		//Manufacturer SW Version&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str20.Execute:=TRUE;&#xD;
				IF FB_SDOread_str20.Done THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state := 26;&#xD;
					Info1S.Drive.ManufacturerSoftwareVersion := read_data_str20;&#xD;
				ELSIF FB_SDOread_str20.Error THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=10025;&#xD;
				END_IF;&#xD;
		26:&#xD;
				SdoObj.Index:=16#4000;&#xD;
				SdoObj.Subindex:=16#81;		//FullErrorCode&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_udint.Execute:=TRUE;&#xD;
				IF FB_SDOread_udint.Done THEN&#xD;
					FB_SDOread_udint.Execute:=FALSE;&#xD;
					IF LifetimeInfo THEN&#xD;
						state := 50;&#xD;
					ELSIF EncoderInfo THEN&#xD;
						state := 80;&#xD;
					ELSIF MotorInfo THEN&#xD;
						state := 100;&#xD;
					ELSE&#xD;
						state := 20;&#xD;
						Done := TRUE;&#xD;
					END_IF;&#xD;
					Info1S.Drive.ErrorFullCode := UDINT_TO_WORD(read_data_udint);&#xD;
					Info1S.Drive.ErrorFullCode := 16#A100;&#xD;
				//read_data_udint := 16#A300;&#xD;
					WarningCodeDec := UDINT_TO_UINT(read_data_udint/256);&#xD;
					SubCodeDec :=(UDINT_TO_WORD(read_data_udint)) AND WORD#16#FF;&#xD;
					CASE WarningCodeDec OF&#xD;
						160:  //A0		Overload Warning&#xD;
							Info1S.Drive.Warning.Overload := TRUE;&#xD;
						161:  //A1		Regeneration Overload warning&#xD;
							Info1S.Drive.Warning.RegenerationOverload :=TRUE;&#xD;
						163: // A3 	Fan Rotation Warning&#xD;
							Info1S.Drive.Warning.FanRotation := TRUE;&#xD;
						164: // A4		Encoder Communications Warning&#xD;
							Info1S.Drive.Warning.EncoderCommunication := TRUE;&#xD;
						166: // A6 Motor Vibration Warning&#xD;
							Info1S.Drive.Warning.Vibration := TRUE;&#xD;
						167: // A7&#xD;
							IF SubCodeDec = 16#1 THEN	//Capacitor Lifetime Warning&#xD;
								Info1S.Drive.Warning.CapacitorLifetime := TRUE;&#xD;
							ELSIF SubCodeDec = 16#2 THEN	//Inrush Current Prevention Relay Lifetime Warning&#xD;
								Info1S.Drive.Warning.InrushCurrentPreventionRelayLifetime := TRUE;&#xD;
							ELSIF&#xD;
								 SubCodeDec = 16#4 THEN	//Brake Interlock Output Relay Lifetime Warning&#xD;
								Info1S.Drive.Warning.BrakeInterlockOutputRelayLifetime := TRUE;&#xD;
							ELSIF&#xD;
								 SubCodeDec = 16#5 THEN	//Lifetime Information Corruption Warning&#xD;
								Info1S.Drive.Warning.LifetimeInformationCorruption := TRUE;&#xD;
							ELSIF  SubCodeDec = 16#6 THEN  //Encoder Lifetime Warning&#xD;
								Info1S.Drive.Warning.EncoderLifetime := TRUE;&#xD;
							END_IF;&#xD;
						171:  //AB   Absolute Encoder Counter Overflow Warning&#xD;
							Info1S.Drive.Warning.AbsoluteEncoderCounterOverflow := TRUE;&#xD;
						176: //B0		Data Setting Warning&#xD;
							Info1S.Drive.Warning.DataSettingWarning := TRUE;	&#xD;
						177: //B1		Command Warning&#xD;
							Info1S.Drive.Warning.CommandWarning := TRUE;&#xD;
						178: //B2		EtherCAT Communications Warning&#xD;
							Info1S.Drive.Warning.EthercatCommunications := TRUE;&#xD;
					ELSE&#xD;
							Clear(Info1S.Drive.Warning);&#xD;
							SubCodeDec:=0;&#xD;
							WarningCodeDec:=0;&#xD;
					END_CASE;&#xD;
					&#xD;
				ELSIF FB_SDOread_udint.Error THEN&#xD;
					FB_SDOread_udint.Execute:=FALSE;&#xD;
					state:=10026;&#xD;
				END_IF;&#xD;
		//----------------------------------------------------- LifeTime Info ------------------------------------------------------------------&#xD;
		50:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#81;		//TotalPowerOnTime in min&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=51;&#xD;
					Info1S.LifeTimeInfo.TotalPowerOnTime_min := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10050;&#xD;
				END_IF;	&#xD;
		51:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#82;		//TotalCapacitorOperatingTime_min&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=52;&#xD;
					Info1S.LifeTimeInfo.TotalCapacitorOperatingTime_min := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10051;&#xD;
				END_IF;	&#xD;
		52:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#83;		//CapacitorOperationTimeRatio_pm&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=53;&#xD;
					Info1S.LifeTimeInfo.CapacitorOperationTimeRatio_pm := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10052;&#xD;
				END_IF;	&#xD;
		53:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#84;		//InrushCurrentPreventionRelayON_Count&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=54;&#xD;
					Info1S.LifeTimeInfo.InrushCurrentPreventionRelayON_Count := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10053;&#xD;
				END_IF;&#xD;
		54:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#85;		//DynamicBrakeRelayON_Count&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=55;&#xD;
					Info1S.LifeTimeInfo.DynamicBrakeRelayON_Count := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10054;&#xD;
				END_IF;		&#xD;
		55:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#86;		//MotorOperatingTime&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=56;&#xD;
					Info1S.LifeTimeInfo.MotorOperatingTime := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10055;&#xD;
				END_IF;	&#xD;
		56:&#xD;
				SdoObj.Index:=16#4140;&#xD;
				SdoObj.Subindex:=16#87;		//BrakeInterlockOutputRelayON_Count&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					IF EncoderInfo THEN&#xD;
						state := 80;&#xD;
					ELSIF MotorInfo THEN&#xD;
						state := 100;&#xD;
					ELSE&#xD;
						state := 20;&#xD;
						Done := TRUE;						&#xD;
					END_IF;&#xD;
					Info1S.LifeTimeInfo.BrakeInterlockOutputRelayON_Count := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10056;&#xD;
				END_IF;	&#xD;
		//----------------------------------------------------- Encoder Info ------------------------------------------------------------------&#xD;
		80:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#89;		//EncoderTemperatue&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=81;&#xD;
					Info1S.EncoderInfo.EncoderTemperature := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10080;&#xD;
				END_IF;	&#xD;
		81:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#81;		//SerialNumber&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str16.Execute:=TRUE;&#xD;
				IF FB_SDOread_str16.Done THEN&#xD;
					FB_SDOread_str16.Execute:=FALSE;&#xD;
					state:=82;&#xD;
					Info1S.EncoderInfo.SerialNumber := read_data_str16;&#xD;
					tst := read_data_str16;&#xD;
				ELSIF FB_SDOread_str16.Error THEN&#xD;
					FB_SDOread_str16.Execute:=FALSE;&#xD;
					state:=10081;&#xD;
				END_IF;	&#xD;
		82:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#87;		//ElectricAngle&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=83;&#xD;
					Info1S.EncoderInfo.ElectricAngle := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10082;&#xD;
				END_IF;	&#xD;
		83:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#82;		//Resolution perRotation&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=84;&#xD;
					Info1S.EncoderInfo.Resolution := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10083;&#xD;
				END_IF;	&#xD;
		84:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#84;		//One-rotationData&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=85;&#xD;
					Info1S.EncoderInfo.OneRotationData := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10084;&#xD;
				END_IF;	&#xD;
		85:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#85;		//Multi-rotationData&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_dint.Execute:=TRUE;&#xD;
				IF FB_SDOread_dint.Done THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=86;&#xD;
					Info1S.EncoderInfo.MultiRotationData := read_data_dint;&#xD;
				ELSIF FB_SDOread_dint.Error THEN&#xD;
					FB_SDOread_dint.Execute:=FALSE;&#xD;
					state:=10085;&#xD;
				END_IF;	&#xD;
		86:&#xD;
				SdoObj.Index:=16#4510;&#xD;
				SdoObj.Subindex:=16#88;		//MechanicalAngle&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_udint.Execute:=TRUE;&#xD;
				IF FB_SDOread_udint.Done THEN&#xD;
					FB_SDOread_udint.Execute:=FALSE;&#xD;
					IF MotorInfo THEN&#xD;
						state := 100;&#xD;
					ELSE&#xD;
						state := 20;&#xD;
						Done := TRUE;						&#xD;
					END_IF;					&#xD;
					Info1S.EncoderInfo.MechanicalAngle := read_data_udint;&#xD;
				ELSIF FB_SDOread_udint.Error THEN&#xD;
					FB_SDOread_udint.Execute:=FALSE;&#xD;
					state:=10086;&#xD;
				END_IF;	&#xD;
				&#xD;
				//----------------------------------------------------- Motor Info ------------------------------------------------------------------&#xD;
		100:&#xD;
				SdoObj.Index:=16#4410;&#xD;
				SdoObj.Subindex:=16#81;		//MotorModel&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str20.Execute:=TRUE;&#xD;
				IF FB_SDOread_str20.Done THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=101;&#xD;
					Info1S.MotorInfo.MotorModel := read_data_str20;&#xD;
				ELSIF FB_SDOread_str20.Error THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=10100;&#xD;
				END_IF;	&#xD;
		101:&#xD;
				SdoObj.Index:=16#4410;&#xD;
				SdoObj.Subindex:=16#82;		//SerialNumber&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str16.Execute:=TRUE;&#xD;
				IF FB_SDOread_str16.Done THEN&#xD;
					FB_SDOread_str16.Execute:=FALSE;&#xD;
					state:=102;&#xD;
					Info1S.MotorInfo.SerialNumber := read_data_str16;&#xD;
					tst := read_data_str16;&#xD;
				ELSIF FB_SDOread_str16.Error THEN&#xD;
					FB_SDOread_str16.Execute:=FALSE;&#xD;
					state:=10081;&#xD;
				END_IF;	&#xD;
		102:&#xD;
				SdoObj.Index:=16#4410;&#xD;
				SdoObj.Subindex:=16#83;		//LastConnectedMotorModel&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str20.Execute:=TRUE;&#xD;
				IF FB_SDOread_str20.Done THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=103;&#xD;
					Info1S.MotorInfo.LastConnectedMotorModel := read_data_str20;&#xD;
				ELSIF FB_SDOread_str20.Error THEN&#xD;
					FB_SDOread_str20.Execute:=FALSE;&#xD;
					state:=10102;&#xD;
				END_IF;	&#xD;
		103:&#xD;
				SdoObj.Index:=16#4410;&#xD;
				SdoObj.Subindex:=16#84;		//LastConnectedSerialNumber&#xD;
				SdoObj.IsCompleteAccess:=FALSE;&#xD;
				FB_SDOread_str16.Execute:=TRUE;&#xD;
				IF FB_SDOread_str16.Done THEN&#xD;
					FB_SDOread_str16.Execute:=FALSE;&#xD;
					state := 20;		&#xD;
					Done := TRUE;					&#xD;
					Info1S.MotorInfo.LastConnectedSerialNumber := read_data_str16;&#xD;
				ELSIF FB_SDOread_str16.Error THEN&#xD;
					FB_SDOread_str16.Execute:=FALSE;&#xD;
					state:=10103;&#xD;
				END_IF;	&#xD;
		200:		// Finished without failure&#xD;
			Done:=FALSE;&#xD;
			state:=20;&#xD;
			&#xD;
		10000..20000:			// Errorhandling&#xD;
			Error := TRUE;&#xD;
			problemState:=state-10000;&#xD;
		    ErrorID := 16#0100 OR BinToBCDs_WORD(problemState,_eBCD_FORMAT#_BCD1);&#xD;
&#xD;
			IF NOT Execute THEN&#xD;
				state := 20;&#xD;
				Done := FALSE;&#xD;
				//Error := FALSE;&#xD;
				//ErrorID:=FALSE;&#xD;
			END_IF;&#xD;
		&#xD;
&#xD;
		END_CASE;&#xD;
		&#xD;
		FB_SDOread_dint(NodeAdr:=NodeAdr,SdoObj:=SdoObj,TimeOut:=20,ReadDat:=read_data_dint);&#xD;
		FB_SDOread_udint(NodeAdr:=NodeAdr,SdoObj:=SdoObj,TimeOut:=20,ReadDat:=read_data_udint);&#xD;
		FB_SDOread_str20(NodeAdr:=NodeAdr,SdoObj:=SdoObj,TimeOut:=20,ReadDat:=read_data_str20);&#xD;
		FB_SDOread_str16(NodeAdr:=NodeAdr,SdoObj:=SdoObj,TimeOut:=20,ReadDat:=read_data_str16);&#xD;
ELSE&#xD;
	ErrorID := ERR_MessageCommunicationsNotEnabled;&#xD;
	Error := TRUE;&#xD;
END_IF;&#xD;
&#xD;
	</Text></StructuredTextModel>